// https://docs.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-advanced-stages-compute-create

// HLSL operations : https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-per-component-math

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain  

// TODO: Fix gaps in line  


// User defined types

// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-struct
struct _Pixel {
    uint position_x;
    uint position_y;
    float4 color;
};

// TODO: convert uint to ushort where possible

// per start of scene
int _TextureWidth;
int _TextureHeight;
int _ImageWidth;
int _ImageHeight;

// per update call
uint _NumberOfBrushStrokesOnLine; // length of _BrushStrokeSizesOnLine_Buffer
RWStructuredBuffer<int> _JobDone_Buffer; // dummy data to check Kernel job done - full when all id.x are called!
RWStructuredBuffer<int> _MarkedTextures_Buffer;

// array of 2D vectors, positions and color in pixels
StructuredBuffer<_Pixel> _BrushStrokePositionsOnLine_Buffer; 
// Array of points on line - brush sizes [numbers/indices] 
StructuredBuffer<uint> _BrushStrokeSizesOnLine_Buffer;
StructuredBuffer<uint> _BrushStrokeShapesWidths_Buffer;
// Since 1D arrays start at 0, we need to know the offset. Offset = -x from midpoint, eg, a 3x3 array would run -1, 0 1 etc
StructuredBuffer<int> _BrushStrokeShapesOffset_Buffer;

// Set per start/stop stroke
// list of array lengths - lookup table for brush sizes
StructuredBuffer<uint> _BrushStrokeSizesArrayLengths_Buffer;
// Arrays of brush sizes alphas
StructuredBuffer<float> _BrushStrokeShapeSize0_Buffer; 
StructuredBuffer<float> _BrushStrokeShapeSize1_Buffer; 
StructuredBuffer<float> _BrushStrokeShapeSize2_Buffer; 
StructuredBuffer<float> _BrushStrokeShapeSize3_Buffer; 
StructuredBuffer<float> _BrushStrokeShapeSize4_Buffer; 


// https://logins.github.io/graphics/2020/10/31/D3D12ComputeShaders.html
// Quest 2 build works fine - Editor does not!
shared RWTexture2D<float4> _RenderTexture00; // The Output render texture
shared RWTexture2D<float4> _RenderTexture01; // The Output render texture
shared RWTexture2D<float4> _RenderTexture02; // The Output render texture
shared RWTexture2D<float4> _RenderTexture03; // The Output render texture
#if !SHADER_API_D3D11
RWTexture2D<float4> _RenderTexture04; // The Output render texture
RWTexture2D<float4> _RenderTexture05; // The Output render texture
RWTexture2D<float4> _RenderTexture06; // The Output render texture
RWTexture2D<float4> _RenderTexture07; // The Output render texture
RWTexture2D<float4> _RenderTexture08; // The Output render texture
RWTexture2D<float4> _RenderTexture09; // The Output render texture
RWTexture2D<float4> _RenderTexture10; // The Output render texture
RWTexture2D<float4> _RenderTexture11; // The Output render texture
RWTexture2D<float4> _RenderTexture12; // The Output render texture
RWTexture2D<float4> _RenderTexture13; // The Output render texture
RWTexture2D<float4> _RenderTexture14; // The Output render texture
RWTexture2D<float4> _RenderTexture15; // The Output render texture
RWTexture2D<float4> _RenderTexture16; // The Output render texture
RWTexture2D<float4> _RenderTexture17; // The Output render texture
RWTexture2D<float4> _RenderTexture18; // The Output render texture
RWTexture2D<float4> _RenderTexture19; // The Output render texture
#endif

// 
// https://docs.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-advanced-stages-cs-resources
//https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-structuredbuffer
// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-rwtexture2d

// Graphics.CopyTexture(). This lets you copy data from any kind of texture to another* (depending the platform). If you copy the contents of a RenderTexture into a Texture2D using CopyTexture() it'll show up changed on the GPU, 

int TransferXYtoN(int x, int y){
    int n = x + (_ImageWidth * y);
    if(n >= _ImageWidth * _ImageHeight) return -1; 
    return n;
}

int2 CalculatePixelPosition(_Pixel brushCenterPosition, uint brushWidth, uint indexInBrushShapeArray, uint brushSize){
    // calculate offset
    // y offset from center, x offset from center
    uint sum = 0;
    int offset = _BrushStrokeShapesOffset_Buffer[brushSize];
    int2 pos;

    for(uint i = 0; i < brushWidth; i++){
        if(sum >= indexInBrushShapeArray){
            pos.y = brushCenterPosition.position_y + (i + offset); // offsets are negative ?!
            pos.x = brushCenterPosition.position_x + (indexInBrushShapeArray - sum + brushWidth + offset); 
            break;
        }
        sum += brushWidth;
    }

    return pos;
}

uint2 Calculate2D_Position(uint n, uint textureWidth){
    uint2 pos2D;
    pos2D.y = n/textureWidth;
    pos2D.x = n - (textureWidth * pos2D.y);
    return pos2D;
}

[numthreads(1,1,1)] // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-groupthreadid
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // id.x : summation of all brush strokes [different size of a brush strokes]
    uint sumOfAddedBrushStrokesArrays = 0;
    uint indexInBrushStrokesPositionsArray = 0;
    uint indexInBrushStrokeShapeArray = 0;
    uint brushSize;
    
    for(uint i; i < _NumberOfBrushStrokesOnLine; i++){
        brushSize = _BrushStrokeSizesOnLine_Buffer[i]; // number/index of brushSize
        indexInBrushStrokeShapeArray = id.x - sumOfAddedBrushStrokesArrays;  
        sumOfAddedBrushStrokesArrays += _BrushStrokeSizesArrayLengths_Buffer[brushSize];
        if(sumOfAddedBrushStrokesArrays >= id.x){
            // find brush size, find position in brush size shape array
            indexInBrushStrokesPositionsArray = i; // to get the right brush size
            break;
        }
    }

    float alphaInBrushShape;
    uint brushStrokeWidth = 0;
    
    if(_BrushStrokeSizesOnLine_Buffer[indexInBrushStrokesPositionsArray] == 0){
        alphaInBrushShape = _BrushStrokeShapeSize0_Buffer[indexInBrushStrokeShapeArray];
        brushStrokeWidth = _BrushStrokeShapesWidths_Buffer[0];
    }else if(_BrushStrokeSizesOnLine_Buffer[indexInBrushStrokesPositionsArray] == 1){
        alphaInBrushShape = _BrushStrokeShapeSize1_Buffer[indexInBrushStrokeShapeArray];
        brushStrokeWidth = _BrushStrokeShapesWidths_Buffer[1];
    }else if(_BrushStrokeSizesOnLine_Buffer[indexInBrushStrokesPositionsArray] == 2){
        alphaInBrushShape = _BrushStrokeShapeSize2_Buffer[indexInBrushStrokeShapeArray];
        brushStrokeWidth = _BrushStrokeShapesWidths_Buffer[2];
    }else if(_BrushStrokeSizesOnLine_Buffer[indexInBrushStrokesPositionsArray] == 3){
        alphaInBrushShape = _BrushStrokeShapeSize3_Buffer[indexInBrushStrokeShapeArray];
        brushStrokeWidth = _BrushStrokeShapesWidths_Buffer[3];
    }else if(_BrushStrokeSizesOnLine_Buffer[indexInBrushStrokesPositionsArray] == 4){
        alphaInBrushShape = _BrushStrokeShapeSize4_Buffer[indexInBrushStrokeShapeArray];
        brushStrokeWidth = _BrushStrokeShapesWidths_Buffer[4];
    }

    // center of brush stroke - calculate offset
    _Pixel brushCenterPosition = _BrushStrokePositionsOnLine_Buffer[indexInBrushStrokesPositionsArray];
    int2 pixelPosition = CalculatePixelPosition(brushCenterPosition, brushStrokeWidth, indexInBrushStrokeShapeArray, brushSize);
    
    uint n; // TODO: check max uint value

    // check out of bounds
    if( pixelPosition.x < 0 || pixelPosition.x >= _ImageWidth || pixelPosition.y < 0 || pixelPosition.y >= _ImageHeight )
    {
        // do nothing, pixel out of bounds
    }else {
        // draw pixel in maps
        //n = TransferXYtoN(pixelPosition.x, posY);  
        //_ActiveLayer_Buffer[n] = pixelInBrushShape.color;
        if(pixelPosition.x < _TextureWidth && pixelPosition.y < _TextureHeight ){ // 00
            pixelPosition = pixelPosition;
            _RenderTexture00[pixelPosition] = brushCenterPosition.color; // TODO: add alpha from other array
            _MarkedTextures_Buffer[0] = 2;
        }
        else if(pixelPosition.x < (_TextureWidth << 1) && pixelPosition.y < _TextureHeight){ // 01
            pixelPosition = int2(pixelPosition.x - _TextureWidth, pixelPosition.y );  
            _RenderTexture01[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[1] = 2;
        }
        else if( pixelPosition.x < ((_TextureWidth << 1) + _TextureWidth) && pixelPosition.y < _TextureHeight){ //02
            pixelPosition = int2(pixelPosition.x - (_TextureWidth << 1), pixelPosition.y);
            _RenderTexture02[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[2] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 2) && pixelPosition.y < _TextureHeight){ //03
            pixelPosition = int2(pixelPosition.x - ((_TextureWidth << 1) + _TextureWidth) , pixelPosition.y); // bit shift (_TextureWidth << 1) + (_TextureWidth) same as _TextureWidth *
            _RenderTexture03[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[3] = 2;
        }
#if !SHADER_API_D3D11
        else if( pixelPosition.x < _TextureWidth && pixelPosition.y < (_TextureHeight << 1)){ //04
            pixelPosition = int2(pixelPosition.x, pixelPosition.y - _TextureHeight);
            _RenderTexture04[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[4] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 1) && pixelPosition.y < (_TextureHeight << 1)){ //05
            pixelPosition = int2(pixelPosition.x - _TextureWidth, pixelPosition.y - _TextureHeight);
            _RenderTexture05[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[5] = 2;
        }
        else if( pixelPosition.x < ((_TextureWidth << 1) + _TextureWidth) && pixelPosition.y < (_TextureHeight << 1) ){ //06 // _TextureHeight * 2
            pixelPosition = int2(pixelPosition.x - (_TextureWidth << 1), pixelPosition.y - _TextureHeight);
            _RenderTexture06[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[6] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 2) && pixelPosition.y < (_TextureHeight << 1)){ //07
            pixelPosition = int2(pixelPosition.x - ( (_TextureWidth << 1) + (_TextureWidth) ), pixelPosition.y - _TextureHeight);
            _RenderTexture07[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[7] = 2;
        }
        else if( pixelPosition.x < _TextureWidth && pixelPosition.y < ( (_TextureHeight << 1) + _TextureHeight) ){ //08
            pixelPosition = int2(pixelPosition.x, pixelPosition.y - (_TextureHeight << 1));
            _RenderTexture08[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[8] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 1) && pixelPosition.y < ( (_TextureHeight << 1) + _TextureHeight)){ //09
            pixelPosition = int2(pixelPosition.x - _TextureWidth, pixelPosition.y - (_TextureHeight << 1));
            _RenderTexture09[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[9] = 2;
        }
        else if( pixelPosition.x < ((_TextureWidth << 1) + _TextureWidth) && pixelPosition.y < ( (_TextureHeight << 1) + _TextureHeight)){ //10
            pixelPosition = int2(pixelPosition.x - (_TextureWidth << 1), pixelPosition.y - (_TextureHeight << 1));
            _RenderTexture10[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[10] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 2) && pixelPosition.y < ( (_TextureHeight << 1) + _TextureHeight)){ //11
            pixelPosition = int2(pixelPosition.x - ((_TextureWidth << 1) + _TextureWidth), pixelPosition.y - (_TextureHeight << 1));
            _RenderTexture11[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[11] = 2;
        }
        else if( pixelPosition.x < _TextureWidth && pixelPosition.y < (_TextureHeight << 2)){ //12
            pixelPosition = int2(pixelPosition.x, pixelPosition.y - ( (_TextureHeight << 1) + _TextureHeight));
            _RenderTexture12[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[12] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 1) && pixelPosition.y < (_TextureHeight << 2)){ //13
            pixelPosition = int2(pixelPosition.x - _TextureWidth, pixelPosition.y - ( (_TextureHeight << 1) + _TextureHeight));
            _RenderTexture13[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[13] = 2;
        }
        else if( pixelPosition.x < ((_TextureWidth << 1) + _TextureWidth) && pixelPosition.y < (_TextureHeight << 2)){ //14
            pixelPosition = int2(pixelPosition.x - (_TextureWidth << 1), pixelPosition.y - ( (_TextureHeight << 1) + _TextureHeight));
            _RenderTexture14[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[14] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 2) && pixelPosition.y < (_TextureHeight << 2)){ //15
            pixelPosition = int2(pixelPosition.x - ((_TextureWidth << 1) + _TextureWidth), pixelPosition.y - ( (_TextureHeight << 1) + _TextureHeight));
            _RenderTexture15[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[15] = 2;
        }
        //
        else if( pixelPosition.x < _TextureWidth && pixelPosition.y < ((_TextureHeight << 2) + _TextureHeight)){ //16
            pixelPosition = int2(pixelPosition.x, pixelPosition.y - (_TextureHeight << 2));
            _RenderTexture16[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[16] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 1) && pixelPosition.y < ((_TextureHeight << 2) + _TextureHeight)){ //17
            pixelPosition = int2(pixelPosition.x - _TextureWidth, pixelPosition.y - (_TextureHeight << 2));
            _RenderTexture17[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[17] = 2;
        }
        else if( pixelPosition.x < ((_TextureWidth << 1) + _TextureWidth) && pixelPosition.y < ((_TextureHeight << 2) + _TextureHeight)){ //18
            pixelPosition = int2(pixelPosition.x - (_TextureWidth << 1), pixelPosition.y - (_TextureHeight << 2));
            _RenderTexture18[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[18] = 2;
        }
        else if( pixelPosition.x < (_TextureWidth << 2) && pixelPosition.y < ((_TextureHeight << 2) + _TextureHeight)){ //19
            pixelPosition = int2(pixelPosition.x - ((_TextureWidth << 1) + _TextureWidth), pixelPosition.y - (_TextureHeight << 2));
            _RenderTexture19[pixelPosition] = brushCenterPosition.color;
            _MarkedTextures_Buffer[19] = 2;
        }
#endif
    }
    _JobDone_Buffer[id.x] = 1; 
}




        // Bit shift : x << 1 same as x * 2
        // x << 2 same as x * 4
        // (_TextureHeight << 1)
        // ( (_TextureHeight << 1) + _TextureHeight)
        // (_TextureHeight << 2)
        // (_TextureWidth << 1)
        // ((_TextureWidth << 1) + _TextureWidth)
        // (_TextureWidth << 2)

        // ((_TextureHeight << 2) + _TextureHeight)


        // ((_TextureWidth << 2) + _TextureWidth)
        // 

// Optimization : 
// AVOID DIVIDING WITH 2 
// uint or int bitshifting : res >> 1 -- same as res/2
// and res >> 2 same as res/4
// check : https://www.udemy.com/course/compute-shaders/learn/lecture/22789909#announcements


// built in operations :
// step(x, y) -- as ternary 
// returns ( x >= y ) ? 1 : 0

// length(v) -- returns length of vector v






